{
	"fileTypes": [
	  "omni",
	  "oi"
	],
	"keyEquivalent": "^~N",
	"name": "Omni",
	
	"patterns": [
	  { "include": "#blockstrings" },
	  {
		"begin": "[ \\t]*##\\[",
		"contentName": "comment.block.doc-comment.content.omni",
		"end": "\\]##",
		"name": "comment.block.doc-comment.omni",
		"patterns": [
		  {
			"include": "#multilinedoccomment",
			"name": "comment.block.doc-comment.nested.omni"
		  }
		]
	  },
	  {
		"begin": "[ \\t]*#\\[",
		"contentName": "comment.block.content.omni",
		"end": "\\]#",
		"name": "comment.block.omni",
		"patterns": [
		  {
			"include": "#multilinecomment",
			"name": "comment.block.nested.omni"
		  }
		]
	  },
	  {
		"begin": "(^[ \\t]+)?(?=##)",
		"beginCaptures": {
		  "1": {
			"name": "punctuation.whitespace.comment.leading.omni"
		  }
		},
		"end": "(?!\\G)",
		"patterns": [
		  {
			"begin": "##",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.comment.omni"
			  }
			},
			"end": "\\n",
			"name": "comment.line.number-sign.doc-comment.omni"
		  }
		]
	  },
	  {
		"begin": "(^[ \\t]+)?(?=#[^\\[])",
		"beginCaptures": {
		  "1": {
			"name": "punctuation.whitespace.comment.leading.omni"
		  }
		},
		"end": "(?!\\G)",
		"patterns": [
		  {
			"begin": "#",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.comment.omni"
			  }
			},
			"end": "\\n",
			"name": "comment.line.number-sign.omni"
		  }
		]
	  },
	  {
		"begin": "discard \"\"\"",
		"comment": "A discarded triple string literal comment",
		"end": "\"\"\"(?!\")",
		"name": "comment.line.discarded.omni"
	  },
	  { "include": "#expressions" },
	  {
		"begin": "(^\\s*)?(?=\\{\\.emit: ?\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "\\{\\.(emit:) ?(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "source.c",
			"end": "(\")\"\"(?!\")(\\.{0,1}\\})?",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "source.c"
			  }
			},
			"name": "meta.embedded.block.c",
			"patterns": [
			  {
				"begin": "\\`",
				"end": "\\`",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "source.c"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "\\{\\.",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.pragma.start.omni"
		  }
		},
		"end": "\\.?\\}",
		"endCaptures": {
		  "0": {
			"name": "punctuation.pragma.end.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "\\b([[:alpha:]]\\w*)(?:\\s|\\s*:)",
			"beginCaptures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  }
			},
			"end": "(?=\\.?\\}|,)",
			"patterns": [
			  {
				"include": "source.omni"
			  }
			]
		  },
		  {
			"begin": "\\b([[:alpha:]]\\w*)\\(",
			"beginCaptures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  }
			},
			"end": "\\)",
			"patterns": [
			  {
				"include": "source.omni"
			  }
			]
		  },
		  {
			"match": "\\b([[:alpha:]]\\w*)(?=\\.?\\}|,)",
			"captures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  }
			}
		  },
		  {
			"begin": "\\b([[:alpha:]]\\w*)(\"\"\")",
			"beginCaptures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  },
			  "2": {
				"meta": "punctuation.definition.string.begin.omni"
			  }
			},
			"end": "\"\"\"(?!\")",
			"endCaptures": {
			  "0": "punctuation.definition.string.end.omni"
			},
			"name": "string.quoted.triple.raw.omni"
		  },
		  {
			"begin": "\\b([[:alpha:]]\\w*)(\")",
			"beginCaptures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  },
			  "2": {
				"meta": "punctuation.definition.string.begin.omni"
			  }
			},
			"end": "\"|$",
			"endCaptures": {
			  "0": "punctuation.definition.string.end.omni"
			},
			"name": "string.quoted.double.raw.omni"
		  },
		  {
			"begin": "\\b(hint\\[\\w+\\]):",
			"beginCaptures": {
			  "1": {
				"name": "meta.preprocessor.pragma.omni"
			  }
			},
			"end": "(?=\\.?\\}|,)",
			"patterns": [
			  {
				"include": "source.omni"
			  }
			]
		  },
		  {
			"match": ",",
			"name": "punctuation.separator.comma.omni"
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=asm \"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(asm) (\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "source.asm",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "source.asm"
			  }
			},
			"name": "meta.embedded.block.asm",
			"patterns": [
			  {
				"begin": "\\`",
				"end": "\\`",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "source.asm"
			  }
			]
		  }
		]
	  },
	  {
		"captures": {
		  "1": {
			"name": "storage.type.function.omni"
		  },
		  "2": {
			"name": "keyword.operator.omni"
		  }
		},
		"comment": "tmpl specifier",
		"match": "(tmpl(i)?)(?=( (html|xml|js|css|glsl|md))?\"\"\")"
	  },
	  {
		"begin": "(^\\s*)?(?=html\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(html)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "text.html",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "text.html"
			  }
			},
			"name": "meta.embedded.block.html",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "text.html"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=xml\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(xml)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "text.xml",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "text.xml"
			  }
			},
			"name": "meta.embedded.block.xml",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "text.xml"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=js\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(js)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "source.js",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "source.js"
			  }
			},
			"name": "meta.embedded.block.js",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "source.js"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=css\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(css)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "source.css",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "source.css"
			  }
			},
			"name": "meta.embedded.block.css",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "source.css"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=glsl\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(glsl)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "source.glsl",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "source.glsl"
			  }
			},
			"name": "meta.embedded.block.glsl",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "source.glsl"
			  }
			]
		  }
		]
	  },
	  {
		"begin": "(^\\s*)?(?=md\"\"\")",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.leading.omni"
		  }
		},
		"end": "(?!\\G)(\\s*$\\n?)?",
		"endCaptures": {
		  "0": {
			"name": "punctuation.whitespace.embedded.trailing.omni"
		  }
		},
		"patterns": [
		  {
			"begin": "(md)(\"\"\")",
			"captures": {
			  "1": {
				"name": "keyword.other.omni"
			  },
			  "2": {
				"name": "punctuation.section.embedded.begin.omni"
			  }
			},
			"contentName": "text.html.markdown",
			"end": "(\")\"\"(?!\")",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.embedded.end.omni"
			  },
			  "1": {
				"name": "text.html.markdown"
			  }
			},
			"name": "meta.embedded.block.html.markdown",
			"patterns": [
			  {
				"begin": "(?<!\\$)(\\$)\\(",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)\\{",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "\\}",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"begin": "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )",
				"captures": {
				  "1": {
					"name": "keyword.operator.omni"
				  },
				  "2": {
					"name": "keyword.operator.omni"
				  }
				},
				"end": "(\\{|\\n)",
				"endCaptures": {
				  "1": {
					"name": "plain"
				  }
				},
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  },
			  {
				"match": "(?<!\\$)(\\$\\w+)",
				"name": "keyword.operator.omni"
			  },
			  {
				"include": "text.html.markdown"
			  }
			]
		  }
		]
	  }
	],
	
	"repository": {
	  "expressions": {
		"patterns": [
		  {
			"comment": "A nim procedure or method",
			"name": "meta.proc.omni",
			"patterns": [
			  {
				"begin": "\\b(proc|method|template|macro|iterator|converter|func)\\s+\\`?([^\\:\\{\\s\\`\\*\\(]*)\\`?(\\s*\\*)?\\s*(?=\\(|\\=|:|\\[|\\n|\\{)",
				"captures": {
				  "1": {
					"name": "keyword.other"
				  },
				  "2": {
					"name": "entity.name.function.omni"
				  },
				  "3": {
					"name": "keyword.control.export"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  }
			]
		  },
		  {
			"comment": "def: omni's proc",
			"name": "meta.proc.omni",
			"patterns": [
			  {
				"begin": "\\b(def)\\s+\\`?([^\\:\\{\\s\\`\\*\\(]*)\\`?(\\s*\\*)?\\s*(?=\\(|\\=|:|\\[|\\n|\\{)",
				"captures": {
				  "1": {
					"name": "keyword.other"
				  },
				  "2": {
					"name": "entity.name.function.omni"
				  },
				  "3": {
					"name": "keyword.control.export"
				  }
				},
				"end": "\\)",
				"patterns": [
				  {
					"include": "source.omni"
				  }
				]
			  }
			]
		  },
		  {
			"include": "#float_literal"
		  },
		  {
			"include": "#integer_literal"
		  },
		  {
			"comment": "Operator as function name",
			"match": "(?<=\\`)[^\\` ]+(?=\\`)",
			"name": "entity.name.function.omni"
		  },
		  {
			"captures": {
			  "1": {
				"name": "keyword.control.export"
			  }
			},
			"comment": "Export qualifier.",
			"match": "\\b\\s*(\\*)(?:\\s*(?=[,:])|\\s+(?=[=]))"
		  },
		  {
			"comment": "Export qualifier following a type def.",
			"match": "\\b([A-Z]\\w+)(\\*)",
			"captures": {
			  "1": {
				"name": "support.type.omni"
			  },
			  "2": {
				"name": "keyword.control.export"
			  }
			}
		  },
		  {
			"include": "#string_literal"
		  },
		  {
			"comment": "Language Constants.",
			"match": "\\b(true|false|Inf|NegInf|NaN|nil)\\b",
			"name": "constant.language.omni"
		  },
		  {
			"comment": "Omni keywords BLUE",
			"match": "\\b(require|struct|def|inputs|outputs|ins|outs|init|initialize|initialise|build|perform|sample)\\b",
			"name": "keyword.other.omni"
		  },
		  {
			"comment": "Omni keywords GREEN",
			"match": "\\b(samplerate|sampleRate|sample_rate|bufsize|bufSize|buf_size|TWOPI|PI|twopi|twoPi|pi)\\b",
			"name": "support.type.omni"
		  },
		  {
			"commment": "Omni in1, in2 ... in32",
			"match": "\\b(in1|in2|in3|in4|in5|in6|in7|in8|in9|in10|in11|in12|in13|in14|in15|in16|in17|in18|in19|in20|in21|in22|in23|in24|in25|in26|in27|in28|in29|in30|in31|in32)\\b",
			"name": "support.type.omni"
		  },
		  {
			"commment": "Omni arg1, arg2 ... arg32",
			"match": "\\b(arg1|arg2|arg3|arg4|arg5|arg6|arg7|arg8|arg9|arg10|arg11|arg12|arg13|arg14|arg15|arg16|arg17|arg18|arg19|arg20|arg21|arg22|arg23|arg24|arg25|arg26|arg27|arg28|arg29|arg30|arg31|arg32)\\b",
			"name": "support.type.omni"
		  },
		  {
			"commment": "Omni out1, out2 ... out32",
			"match": "\\b(out1|out2|out3|out4|out5|out6|out7|out8|out9|out10|out11|out12|out13|out14|out15|out16|out17|out18|out19|out20|out21|out22|out23|out24|out25|out26|out27|out28|out29|out30|out31|out32)\\b",
			"name": "support.type.omni"
		  },
		  {
			"comment": "Keywords that affect program control flow or scope.",
			"match": "\\b(block|break|case|continue|do|elif|else|end|except|finally|for|if|raise|return|try|when|while|yield)\\b",
			"name": "keyword.control.omni"
		  },
		  {
			"comment": "Keyword boolean operators for expressions.",
			"match": "(\\b(and|in|is|isnot|not|notin|or|xor)\\b)",
			"name": "keyword.boolean.omni"
		  },
		  {
			"comment": "Generic operators for expressions.",
			"match": "(=|\\+|-|\\*|/|<|>|@|\\$|~|&|%|!|\\?|\\^|\\.|:|\\\\)+",
			"name": "keyword.operator.omni"
		  },
		  {
			"comment": "Other keywords.",
			"match": "(\\b(discard|div|enum|export|from|import|include|let|mod|shl|shr|var|tuple)\\b)",
			"name": "keyword.other.omni"
		  },
		  {
			"comment": "Common functions",
			"match": "\\b(new)\\b",
			"name": "keyword.other.common.function.omni"
		  },
		  {
			"comment": "Built-in, concrete types.",
			"match": "\\b(((uint|int)(8|16|32|64)?)|float(32|64)?|signal(32|64)?|sig(32|64)?|bool|string)\\b",
			"name": "storage.type.concrete.omni"
		  },
		  {
			"comment": "Special types.",
			"match": "\\b(void)\\b",
			"name": "storage.type.generic.omni"
		  },
		  {
			"comment": "Other constants.",
			"match": "\\b[A-Z][A-Z0-9_]+\\b",
			"name": "support.constant.omni"
		  },
		  {
			"comment": "Other types.",
			"match": "\\b[A-Z]\\w+\\b",
			"name": "support.type.omni"
		  },
		  {
			"comment": "Function call.",
			"match": "\\b\\w+\\b(?=(\\[([a-zA-Z0-9_,]|\\s)+\\])?\\()",
			"name": "support.function.any-method.omni"
		  }
		]
	  },
		  "blockstrings": {
			  "patterns": [
				  { "include": "#block-container_string-raw" },
				  { "include": "#block-container_string" }
			  ]
		  },
		  "block-container_string-raw": {
			  "name": "meta.structure.block-container.string-raw.omni",
			  "begin": "(?=^( *)((?:[^#\"]|\"(?:\\\\.|[^\"])*\")*)(\\w+\":)\\s*$)(?!.*\"\"\")",
			  "while": "^(?:\\1  |\\s*$)",
			  "patterns": [
				  { "include": "#block-container_initial-line" },
				  {
					  "match": "(?:[^\\s]|\\s(?!\\s*$))+",
					  "name": "string.quoted.block.raw.omni"
				  }
			  ]
		  },
		  "block-container_string": {
			  "name": "meta.structure.block-container.string.omni",
			  "begin": "(?=^( *)((?:[^#\"]|\"(?:\\\\.|[^\"])*\")*)(\":)\\s*$)(?!.*\"\"\")",
			  "while": "^(?:\\1  |\\s*$)",
			  "patterns": [
				  { "include": "#block-container_initial-line" },
				  { "include": "#string_escapes" },
				  {
					  "match": "(?:[^\\s\\\\]|\\s(?!\\s*$))+",
					  "name": "string.quoted.block.omni"
				  }
			  ]
		  },
		  "block-container_initial-line": {
			  "begin": "^",
			  "end": "$",
			  "name": "meta.structure.block-container.initial-line.omni",
			  "patterns": [{ "include": "#expressions" }]
		  },
	  "multilinecomment": {
		"begin": "#\\[",
		"end": "\\]#",
		"patterns": [
		  {
			"include": "#multilinecomment"
		  }
		]
	  },
	  "multilinedoccomment": {
		"begin": "##\\[",
		"end": "\\]##",
		"patterns": [
		  {
			"include": "#multilinedoccomment"
		  }
		]
	  },
	  "char_escapes": {
		"patterns": [
		  {
			"match": "\\\\[cC]|\\\\[rR]",
			"name": "constant.character.escape.carriagereturn.omni"
		  },
		  {
			"match": "\\\\[lL]|\\\\[nN]",
			"name": "constant.character.escape.linefeed.omni"
		  },
		  {
			"match": "\\\\[fF]",
			"name": "constant.character.escape.formfeed.omni"
		  },
		  {
			"match": "\\\\[tT]",
			"name": "constant.character.escape.tabulator.omni"
		  },
		  {
			"match": "\\\\[vV]",
			"name": "constant.character.escape.verticaltabulator.omni"
		  },
		  {
			"match": "\\\\\\\"",
			"name": "constant.character.escape.double-quote.omni"
		  },
		  {
			"match": "\\\\'",
			"name": "constant.character.escape.single-quote.omni"
		  },
		  {
			"match": "\\\\[0-9]+",
			"name": "constant.character.escape.chardecimalvalue.omni"
		  },
		  {
			"match": "\\\\[aA]",
			"name": "constant.character.escape.alert.omni"
		  },
		  {
			"match": "\\\\[bB]",
			"name": "constant.character.escape.backspace.omni"
		  },
		  {
			"match": "\\\\[eE]",
			"name": "constant.character.escape.escape.omni"
		  },
		  {
			"match": "\\\\[xX]\\h\\h",
			"name": "constant.character.escape.hex.omni"
		  },
		  {
			"match": "\\\\\\\\",
			"name": "constant.character.escape.backslash.omni"
		  },
		  {
			"match": "\\\\.",
			"name": "invalid.illegal.unknown-escape.omni"
		  }
		]
	  },
	  "string_escapes": {
		"patterns": [
		  {
			"match": "\\\\$",
			"name": "constant.character.escape.no-newline.omni"
		  },
		  {
			"match": "\\\\[pP]",
			"name": "constant.character.escape.newline.omni"
		  },
		  {
			"match": "\\\\[uU]\\h\\h\\h\\h",
			"name": "constant.character.escape.hex.omni"
		  },
		  {
			"match": "\\\\[uU]\\{\\h+\\}",
			"name": "constant.character.escape.hex.omni"
		  },
		  {
			"include": "#char_escapes"
		  }
		]
	  },
	  "raw_string_escapes": {
		"match": "[^\"](\"\")",
		"captures": {
		  "1": {
			"name": "constant.character.escape.double-quote.omni"
		  }
		}
	  },
	  "fmt_interpolation": {
		"begin": "\\{",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.template-expression.begin.omni"
		  }
		},
		"end": "\\}",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.template-expression.end.omni"
		  }
		},
		"patterns": [
		  {
			"begin": ":",
			"end": "(?=\\})",
			"name": "meta.template.format-specifier.omni"
		  },
		  {
			"include": "source.omni"
		  }
		],
		"name": "meta.template.expression.omni"
	  },
	  "string_literal": {
		"patterns": [
		  {
			"include": "#string_block_init-tag"
		  },
		  {
			"include": "#fmt_string_triple"
		  },
		  {
			"include": "#fmt_string_triple_operator"
		  },
		  {
			"include": "#extended_string_quoted_triple_raw"
		  },
		  {
			"include": "#string_quoted_triple_raw"
		  },
		  {
			"include": "#fmt_string_operator"
		  },
		  {
			"include": "#fmt_string"
		  },
		  {
			"include": "#fmt_string_call"
		  },
		  {
			"include": "#string_quoted_double_raw"
		  },
		  {
			"include": "#extended_string_quoted_double_raw"
		  },
		  {
			"include": "#string_quoted_single"
		  },
		  {
			"include": "#string_quoted_triple"
		  },
		  {
			"include": "#string_quoted_double"
		  }
		]
	  },
	  "string_block_init-tag": {
		"name": "string.quoted.block.init-tag.omni",
		"begin": "(\\w*)(\")(:)(?=\\s*$)",
		"end": "$",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  },
		  "3": {
			"name": "keyword.operator.omni"
		  }
		}
	  },
	  "fmt_string": {
		"begin": "\\b(fmt)(\")",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.double.raw.omni",
		"patterns": [
		  {
			"match": "(?<!\")\"(?!\")",
			"name": "invalid.illegal.omni"
		  },
		  {
			"include": "#raw_string_escapes"
		  },
		  {
			"include": "#fmt_interpolation"
		  }
		]
	  },
	  "fmt_string_triple": {
		"begin": "\\b(fmt)(\"\"\")",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"\"\"",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.triple.raw.omni",
		"patterns": [
		  {
			"include": "#fmt_interpolation"
		  }
		]
	  },
	  "fmt_string_operator": {
		"begin": "(&)(\")",
		"beginCaptures": {
		  "1": {
			"name": "keyword.operator.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.double.omni",
		"patterns": [
		  {
			"match": "\"",
			"name": "invalid.illegal.omni"
		  },
		  {
			"include": "#string_escapes"
		  },
		  {
			"include": "#fmt_interpolation"
		  }
		]
	  },
	  "fmt_string_triple_operator": {
		"begin": "(&)(\"\"\")",
		"beginCaptures": {
		  "1": {
			"name": "keyword.operator.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"\"\"",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.triple.raw.omni",
		"patterns": [
		  {
			"include": "#fmt_interpolation"
		  }
		]
	  },
	  "fmt_string_call": {
		"begin": "(fmt)\\((?=\")",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  }
		},
		"end": "\\)",
		"patterns": [
		  {
			"begin": "\"",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.string.begin.omni"
			  }
			},
			"end": "\"(?=\\))",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.string.end.omni"
			  }
			},
			"name": "string.quoted.double.omni",
			"patterns": [
			  {
				"match": "\"",
				"name": "invalid.illegal.omni"
			  },
			  {
				"include": "#string_escapes"
			  },
			  {
				"include": "#fmt_interpolation"
			  }
			]
		  }
		]
	  },
	  "string_quoted_double": {
		"begin": "\"",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"comment": "Double Quoted String",
		"end": "\"|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.double.omni",
		"patterns": [
		  {
			"include": "#string_escapes"
		  }
		]
	  },
	  "string_quoted_double_raw": {
		"begin": "\\br\"",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.double.raw.omni",
		"patterns": [
		  {
			"include": "#raw_string_escapes"
		  }
		]
	  },
	  "extended_string_quoted_double_raw": {
		"begin": "\\b(\\w+)(\")",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.double.raw.omni",
		"patterns": [
		  {
			"include": "#raw_string_escapes"
		  }
		]
	  },
	  "string_quoted_single": {
		"begin": "'",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"comment": "Single quoted character literal",
		"end": "'|$",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.single.omni",
		"patterns": [
		  {
			"include": "#char_escapes"
		  },
		  {
			"match": "([^']{2,}?)",
			"name": "invalid.illegal.character.omni"
		  }
		]
	  },
	  "string_quoted_triple": {
		"begin": "\"\"\"",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"comment": "Triple Quoted String",
		"end": "\"\"\"(?!\")",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.triple.omni"
	  },
	  "string_quoted_triple_raw": {
		"begin": "r\"\"\"",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"comment": "Raw Triple Quoted String",
		"end": "\"\"\"",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.triple.raw.omni"
	  },
	  "extended_string_quoted_triple_raw": {
		"begin": "\\b(\\w+)(\"\"\")",
		"beginCaptures": {
		  "1": {
			"name": "support.function.any-method.omni"
		  },
		  "2": {
			"name": "punctuation.definition.string.begin.omni"
		  }
		},
		"end": "\"\"\"",
		"endCaptures": {
		  "0": {
			"name": "punctuation.definition.string.end.omni"
		  }
		},
		"name": "string.quoted.triple.raw.omni"
	  },
	  "float_literal": {
		"patterns": [
		  {
			"match": "\\b\\d[_\\d]*((\\.\\d[_\\d]*([eE][\\+\\-]?\\d[_\\d]*)?)|([eE][\\+\\-]?\\d[_\\d]*))('([fF](32|64|128)|[fFdD]))?",
			"name": "constant.numeric.float.decimal.omni"
		  },
		  {
			"match": "\\b0[xX]\\h[_\\h]*'([fF](32|64|128)|[fFdD])",
			"name": "constant.numeric.float.hexadecimal.omni"
		  },
		  {
			"match": "\\b0o[0-7][_0-7]*'([fF](32|64|128)|[fFdD])",
			"name": "constant.numeric.float.octal.omni"
		  },
		  {
			"match": "\\b0(b|B)[01][_01]*'([fF](32|64|128)|[fFdD])",
			"name": "constant.numeric.float.binary.omni"
		  },
		  {
			"match": "\\b(\\d[_\\d]*)'([fF](32|64|128)|[fFdD])",
			"name": "constant.numeric.float.decimal.omni"
		  }
		]
	  },
	  "integer_literal": {
		"patterns": [
		  {
			"match": "\\b(0[xX]\\h[_\\h]*)('(([iIuU](8|16|32|64))|[uU]))?",
			"name": "constant.numeric.integer.hexadecimal.omni"
		  },
		  {
			"match": "\\b(0o[0-7][_0-7]*)('(([iIuU](8|16|32|64))|[uU]))?",
			"name": "constant.numeric.integer.octal.omni"
		  },
		  {
			"match": "\\b(0(b|B)[01][_01]*)('(([iIuU](8|16|32|64))|[uU]))?",
			"name": "constant.numeric.integer.binary.omni"
		  },
		  {
			"match": "\\b(\\d[_\\d]*)('(([iIuU](8|16|32|64))|[uU]))?",
			"name": "constant.numeric.integer.decimal.omni"
		  }
		]
	  }
	},

	"scopeName": "source.omni",
	"uuid": "6DD62CE8-B129-4554-BD8E-CE5DB490E5A4"
  }
  